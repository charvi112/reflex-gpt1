# Use a lightweight Python base image
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Define build-time ARG for Node version
ARG NODE_VERSION=20.x

# Install system dependencies, Node.js, and clean up
RUN apt-get update && apt-get install -y \
    curl \
    libpq-dev \
    gnupg \
    unzip \
 && curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION} | bash - \
 && apt-get install -y nodejs \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

# Verify installations
RUN node --version && npm --version

# Add a new user for running the app
RUN adduser --disabled-password --home /app reflex

# Set up a virtual environment for Python
RUN python -m venv /app/.venv
ENV PATH="/app/.venv/bin:$PATH"

# Copy all files and set ownership
COPY --chown=reflex:reflex . /app

# Optional: move .build-env to .env if it exists
RUN if [ -f .build-env ]; then mv .build-env .env; fi

# Fix file ownership and permissions
RUN chown -R reflex:reflex /app

# Switch to non-root user
USER reflex

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Initialize Reflex project (optional: remove .env afterward)
RUN reflex init && rm -f .env

# Set environment variables
ENV PATH="/app/.venv/bin:/usr/local/bin:/usr/bin:/bin:$PATH"
ENV NODE_PATH="/usr/lib/node_modules"
ENV REFLEX_DB_URL="sqlite:///reflex.db"

# Handle shutdown correctly
STOPSIGNAL SIGKILL

# Final command: apply DB migrations and start backend
CMD ["sh", "-c", "reflex db migrate && reflex run --env prod --backend-only"]
